name: Build and Release macOS Artifacts

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify folder structure
        run: |
          ls -la
          ls -la dashboard
          echo "Package.json exists:" $(test -f dashboard/package.json && echo "Yes" || echo "No")

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'dashboard/package-lock.json'

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal

      - name: Install project dependencies
        working-directory: ./dashboard
        run: |
          echo "Current directory: $(pwd)"
          echo "Contents:"
          ls -la
          npm ci

      - name: Install Tauri CLI
        working-directory: ./dashboard
        run: npm install @tauri-apps/cli

      - name: Build both app and dmg
        working-directory: ./dashboard
        run: npx tauri build --bundles app,dmg

      - name: Package .app for Homebrew
        working-directory: ./dashboard
        run: |
          cd src-tauri/target/release/bundle/macos
          tar -czf ProjexNexa.app.tar.gz ProjexNexa.app
          echo "APP_TAR_PATH=$(pwd)/ProjexNexa.app.tar.gz" >> $GITHUB_ENV

      - name: Find DMG artifact
        working-directory: ./dashboard
        id: find-dmg
        run: |
          DMG_PATH=$(ls src-tauri/target/release/bundle/dmg/*.dmg)
          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
          echo "dmg_name=$(basename $DMG_PATH)" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}  # Changed from steps.get-version.outputs.tag
          release_name: "ProjexNexa ${{ steps.get-version.outputs.version }}"
          body: |
            ### macOS Release
            - **Homebrew**: Use the `.app.tar.gz` for formula updates
            - **Manual Install**: Use the `.dmg` file
          draft: false
          prerelease: false

      - name: Upload App Tarball
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ env.APP_TAR_PATH }}
          asset_name: ProjexNexa.app.tar.gz
          asset_content_type: application/gzip

      - name: Upload DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find-dmg.outputs.dmg_path }}
          asset_name: ${{ steps.find-dmg.outputs.dmg_name }}
          asset_content_type: application/octet-stream